require 'csv'

character_csv = 'filename'

#type matchups


MATCHUPS = {
  fire: {fire: 0.0, earth: 0.5, ice: -0.5, dark: -0.5},
  light: {light: 0.0, dark: 0.5, ice: 0.5},
  dark: {dark: 0.0, light: 0.5, fire: 0.5},
  wind: {wind: 0.0, steel: 0.5, ice: 0.5, earth: -0.5, fire: -0.5},
  ice: {ice: 0.0, fire: 0.5, steel: 0.5, light: -0.5, wind: -0.5},
  earth: {earth: 0.0, ice: 0.5, wind: 0.5, steel: -0.5, fire: -0.5},
  steel: {steel: 0.0, fire: 0.5, earth: 0.5, wind: -0.5, ice: -0.5}
}


#initializing Character class

class Character
  attr_accessor :name, :type, :health, :attack, :defense, :speed, :luck

  def initialize(name:, type:, health:, attack:, defense:, speed:, luck:)
      @name = name
      @type = type
      @health = health
      @attack = attack
      @defense = defense
      @speed = speed
      @luck = luck
  end
end

def character_map(filename)
  hash = {}
  CSV.foreach(filename, headers: true, converters: :integer) do |row|
    character = Character.new(name: row['name'], health: row['health'], type: row['type'], attack: row['attack'], defense: row['defense'], speed: row['speed'], luck: row['luck'])
    hash[character.name] = character
    print row
  end
  hash
end



#initializing the battle_arena class
class Battle_arena
  attr_accessor :character_1, :character_2

  def initialize(character_1, character_2)
      @character_1 = character_1
      @character_2 = character_2
  end

  #determining attack multiplier based on critical hit chance and type matchups
  def attack_multiplier(attacker, defender)
      multiplier = 1
      if [0.5, 0.05 * (attacker.luck + 1)].min >= rand
        multiplier += 1
        puts "#{attacker.name} lands a critical hit!"
      end
      multiplier += MATCHUPS[defender.type.to_sym][attacker.type.to_sym]
      multiplier
  end

  #character turn
  def character_turn(attacker, defender)
      damage_taken = (attacker.attack * attack_multiplier(attacker, defender)) - (defender.defense * 0.15)
      defender.health -= damage_taken.to_i
      puts "#{defender.name} loses #{damage_taken} health!"
  end

  #the actual battle sequence and log
  def battle 
      
      while (character_1.health > 0 && character_2.health > 0 )

          puts "#{character_1.name} has #{character_1.health} HP left! #{character_2.name} has #{character_2.health} HP left! \n"
          if (character_1.speed > character_2.speed)
              character_turn(character_1, character_2)
              if character_2.health <= 0
                  puts "#{character_1.name} has #{character_1.health} HP left! #{character_2.name} has 0 HP left! \n"
                  puts "#{character_2.name} cannot battle anymore! #{character_1.name} wins!"
                  break
              end
              character_turn(character_2, character_1)
              if character_1.health <= 0
                  puts "#{character_1.name} has 0 HP left! #{character_2.name} has #{character_2.health} HP left! \n"
                  puts "#{character_1.name} cannot battle anymore! #{character_2.name} wins!"
                  break
              end
              
          elsif (character_2.speed > character_1.speed)
              character_turn(character_2, character_1)
              if character_1.health <= 0
                  puts "#{character_1.name} has 0 HP left! #{character_2.name} has #{character_2.health} HP left! \n"
                  puts "#{character_1.name} cannot battle anymore! #{character_2.name} wins!"
                  break
              end
              character_turn(character_1, character_2)
              if character_2.health <= 0
                  puts "#{character_1.name} has #{character_1.health} HP left! #{character_2.name} has 0 HP left! \n"
                  puts "#{character_2.name} cannot battle anymore! #{character_1.name} wins!"
                  break
              end
              
          else 
              x = rand(1..2)
              if (x == 1)
                  character_turn(character_1, character_2)
                  if character_2.health <= 0
                      puts "#{character_1.name} has #{character_1.health} HP left! #{character_2.name} has 0 HP left! \n"
                      puts "#{character_2.name} cannot battle anymore! #{character_1.name} wins!"
                      break
                  end
                  character_turn(character_2, character_1)
                  if character_1.health <= 0
                      puts "#{character_1.name} has 0HP left! #{character_2.name} has #{character_2.health} HP left! \n"
                      puts "#{character_1.name} cannot battle anymore! #{character_2.name} wins!"
                      break
                  end
                  
              elsif (x == 2)
                  character_turn(character_2, character_1)
                  if character_1.health <= 0
                      puts "#{character_1.name} has 0 HP left! \n #{character_2.name} has #{character_2.health} HP left! \n"
                      puts "#{character_1.name} cannot battle anymore! #{character_2.name} wins!"
                      break
                  end
                  character_turn(character_1, character_2)
                  if character_2.health <= 0
                      puts "#{character_1.name} has #{character_1.health} HP left! \n #{character_2.name} has 0 HP left! \n"
                      puts "#{character_2.name} cannot battle anymore! #{character_1.name} wins!"
                      break
                  end
              end
          end
      end
      
  end
end


#instancing the character map
p character_map(character_csv)


#inputting stats for character 1

puts "Enter Character 1's name"
character_1 = hash[gets.chomp.gsub(" ", "_").downcase.to_sym]
puts "Name: #{name}, Type: #{type}, Health: #{health}, Attack: #{attack}, Defense: #{defense}, Speed: #{speed}, Luck: #{luck}"

#entering stats for character 2

puts "Enter Character 2's name"
character_2 = hash[gets.chomp.gsub(" ", "_").downcase.to_sym]
puts "Name: #{name}, Type: #{type}, Health: #{health}, Attack: #{attack}, Defense: #{defense}, Speed: #{speed}, Luck: #{luck}"


battle_log = Battle_arena.new(character_1, character_2)

battle_log.battle



